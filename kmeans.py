import sys
import sklearn
import numpy as np
import matplotlib.pyplot as plt

print('Python: {}'.format(sys.version))
print('Scikit-learn: {}'.format(sklearn.__version__))
print('NumPy: {}'.format(np.__version__))

import tensorflow as tf
from tensorflow.keras.datasets import mnist

(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Print shape of dataset
print("Training: {}".format(X_train.shape))
print("Test: {}".format(X_test.shape))

fig, axs = plt.subplots(4, 4, figsize = (12, 12))
plt.gray()

# loop through subplots and add mnist images
for i, ax in enumerate(axs.flat):
    ax.imshow(X_train[i])
    ax.axis('off')
    ax.set_title('Number {}'.format(y_train[i]))
    
# display the figure
# plt.show()

# Reshape to flatten the images
X_train = X_train.reshape(len(X_train), -1)
print(X_train.shape)

# Normalize the dataset
X_train = X_train.astype(np.float32) / 255.

# use mini-batch to reduce the training time
from sklearn.cluster import MiniBatchKMeans

n_digits = len(np.unique(y_train))
print(n_digits)

kmeans = MiniBatchKMeans(n_clusters=n_digits)
kmeans.fit(X_train)

# Find labels of each input that is generated by kmeans model
print(kmeans.labels_)